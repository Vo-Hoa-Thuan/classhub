const sgMail = require('@sendgrid/mail');
const ResetToken = require('../models/ResetToken');
const User = require('../models/User');
const crypto = require('crypto');

// C·∫•u h√¨nh SendGrid
sgMail.setApiKey(process.env.SENDGRID_API_KEY);

// T·∫°o HTML template cho email reset password
const createResetPasswordEmail = ( resetUrl) => {
  return `
    <!DOCTYPE html>
    <html lang="vi">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - ClassHub</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 600px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f4f4f4;
            }
            .container {
                background: white;
                border-radius: 10px;
                padding: 30px;
                box-shadow: 0 0 20px rgba(0,0,0,0.1);
            }
            .header {
                text-align: center;
                margin-bottom: 30px;
            }
            .logo {
                font-size: 28px;
                font-weight: bold;
                color: #667eea;
                margin-bottom: 10px;
            }
            .title {
                font-size: 24px;
                color: #333;
                margin-bottom: 20px;
            }
            .content {
                margin-bottom: 30px;
            }
            .button {
                display: inline-block;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 15px 30px;
                text-decoration: none;
                border-radius: 25px;
                font-weight: bold;
                text-align: center;
                margin: 20px 0;
                transition: transform 0.3s ease;
            }
            .button:hover {
                transform: translateY(-2px);
            }
            .footer {
                text-align: center;
                margin-top: 30px;
                padding-top: 20px;
                border-top: 1px solid #eee;
                color: #666;
                font-size: 14px;
            }
            .warning {
                background: #fff3cd;
                border: 1px solid #ffeaa7;
                border-radius: 5px;
                padding: 15px;
                margin: 20px 0;
                color: #856404;
            }
            .expiry {
                background: #e3f2fd;
                border: 1px solid #bbdefb;
                border-radius: 5px;
                padding: 15px;
                margin: 20px 0;
                color: #1565c0;
            }
        </style>
    </head>
<body>
        <div class="container">
            <div class="header">
                <div class="logo">üéì ClassHub</div>
                <h1 class="title">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
            </div>
            
            <div class="content">
                <p>Xin ch√†o,</p>
                <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n ClassHub c·ªßa b·∫°n.</p>
                <p>ƒê·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi:</p>
                
                <div style="text-align: center;">
                    <a href="${resetUrl}" class="button">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
                </div>
                
                <div class="expiry">
                    <strong>‚è∞ L∆∞u √Ω:</strong> Link n√†y s·∫Ω h·∫øt h·∫°n sau 15 ph√∫t ƒë·ªÉ ƒë·∫£m b·∫£o b·∫£o m·∫≠t.
                </div>
                
                <div class="warning">
                    <strong>‚ö†Ô∏è C·∫£nh b√°o b·∫£o m·∫≠t:</strong>
                    <ul>
                        <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y</li>
                        <li>Kh√¥ng chia s·∫ª link n√†y v·ªõi b·∫•t k·ª≥ ai</li>
                        <li>Link ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng m·ªôt l·∫ßn duy nh·∫•t</li>
                    </ul>
                </div>
                
                <p>N·∫øu n√∫t kh√¥ng ho·∫°t ƒë·ªông, b·∫°n c√≥ th·ªÉ copy v√† paste link sau v√†o tr√¨nh duy·ªát:</p>
                <p style="word-break: break-all; background: #f8f9fa; padding: 10px; border-radius: 5px; font-family: monospace;">
                    ${resetUrl}
                </p>
            </div>
            
            <div class="footer">
                <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© ClassHub</strong></p>
                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
                <p>¬© 2025 ClassHub. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
            </div>
        </div>
    </body>
    </html>
  `;
};

// G·ª≠i email reset password
const sendResetPasswordEmail = async (email, resetUrl) => {
  try {
    const msg = {
      to: email,
      from: {
        email: process.env.SENDGRID_FROM_EMAIL || 'noreply@classhub.com',
        name: 'ClassHub'
      },
      subject: 'üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - ClassHub',
      html: createResetPasswordEmail(resetUrl)
    };

    const result = await sgMail.send(msg);
    console.log('Email sent successfully via SendGrid:', result[0].statusCode);
    return { success: true, messageId: result[0].headers['x-message-id'] };
  } catch (error) {
    console.error('Error sending email via SendGrid:', error);
    throw new Error('Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau.');
  }
};

// T·∫°o reset token
const createResetToken = async (email) => {
  try {
    // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await User.findOne({ email });
    if (!user) {
      throw new Error('Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
}

    // X√≥a token c≈© n·∫øu c√≥
    await ResetToken.deleteMany({ email });

    // T·∫°o token m·ªõi
    const token = crypto.randomBytes(32).toString('hex');
    const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 ph√∫t

    const resetToken = new ResetToken({
      email,
      token,
      expiresAt
    });

    await resetToken.save();

    return { token, expiresAt };
  } catch (error) {
    console.error('Error creating reset token:', error);
    throw error;
  }
};

// X√°c th·ª±c reset token
const verifyResetToken = async (token) => {
  try {
    const resetToken = await ResetToken.findOne({ 
      token, 
      used: false,
      expiresAt: { $gt: new Date() }
    });

    if (!resetToken) {
      throw new Error('Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }

    return { valid: true, email: resetToken.email };
  } catch (error) {
    console.error('Error verifying reset token:', error);
    throw error;
  }
};

// ƒê√°nh d·∫•u token ƒë√£ s·ª≠ d·ª•ng
const markTokenAsUsed = async (token) => {
  try {
    await ResetToken.findOneAndUpdate(
      { token },
      { used: true }
    );
  } catch (error) {
    console.error('Error marking token as used:', error);
    throw error;
  }
};

// X√≥a token h·∫øt h·∫°n (cleanup job)
const cleanupExpiredTokens = async () => {
  try {
    const result = await ResetToken.deleteMany({
      $or: [
        { expiresAt: { $lt: new Date() } },
        { used: true }
      ]
    });
    
    console.log(`Cleaned up ${result.deletedCount} expired tokens`);
    return result.deletedCount;
  } catch (error) {
    console.error('Error cleaning up expired tokens:', error);
    throw error;
  }
};

module.exports = {
  sendResetPasswordEmail,
  createResetToken,
  verifyResetToken,
  markTokenAsUsed,
  cleanupExpiredTokens
};