const sgMail = require('@sendgrid/mail');
const EmailVerification = require('../models/EmailVerification');
const User = require('../models/User');
const crypto = require('crypto');

// Store ƒë·ªÉ theo d√µi c√°c token ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω
const processingTokens = new Set();

// Map ƒë·ªÉ l∆∞u tr·ªØ k·∫øt qu·∫£ ƒë√£ x·ª≠ l√Ω
const processedResults = new Map();

// C·∫•u h√¨nh SendGrid
sgMail.setApiKey(process.env.SENDGRID_API_KEY);

// T·∫°o HTML template cho email x√°c nh·∫≠n ƒëƒÉng k√Ω
const createVerificationEmail = (verificationUrl, fullname) => {
  return `
    <!DOCTYPE html>
    <html lang="vi">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>X√°c nh·∫≠n ƒëƒÉng k√Ω - ClassHub</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 600px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f4f4f4;
            }
            .container {
                background: white;
                border-radius: 10px;
                padding: 30px;
                box-shadow: 0 0 20px rgba(0,0,0,0.1);
            }
            .header {
                text-align: center;
                margin-bottom: 30px;
            }
            .logo {
                font-size: 28px;
                font-weight: bold;
                color: #667eea;
                margin-bottom: 10px;
            }
            .title {
                font-size: 24px;
                color: #333;
                margin-bottom: 20px;
            }
            .content {
                margin-bottom: 30px;
            }
            .button {
                display: inline-block;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 15px 30px;
                text-decoration: none;
                border-radius: 25px;
                font-weight: bold;
                text-align: center;
                margin: 20px 0;
                transition: transform 0.3s ease;
            }
            .button:hover {
                transform: translateY(-2px);
            }
            .footer {
                text-align: center;
                margin-top: 30px;
                padding-top: 20px;
                border-top: 1px solid #eee;
                color: #666;
                font-size: 14px;
            }
            .warning {
                background: #fff3cd;
                border: 1px solid #ffeaa7;
                border-radius: 5px;
                padding: 15px;
                margin: 20px 0;
                color: #856404;
            }
            .expiry {
                background: #e3f2fd;
                border: 1px solid #bbdefb;
                border-radius: 5px;
                padding: 15px;
                margin: 20px 0;
                color: #1565c0;
            }
            .success {
                background: #d4edda;
                border: 1px solid #c3e6cb;
                border-radius: 5px;
                padding: 15px;
                margin: 20px 0;
                color: #155724;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="logo">üéì ClassHub</div>
                <h1 class="title">Ch√†o m·ª´ng ${fullname}!</h1>
            </div>
            
            <div class="content">
                <p>Xin ch√†o <strong>${fullname}</strong>,</p>
                <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i <strong>ClassHub</strong>!</p>
                <p>ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω v√† k√≠ch ho·∫°t t√†i kho·∫£n, vui l√≤ng nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi:</p>
                
                <div style="text-align: center;">
                    <a href="${verificationUrl}" class="button">X√°c nh·∫≠n t√†i kho·∫£n</a>
                </div>
                
                <div class="expiry">
                    <strong>‚è∞ L∆∞u √Ω quan tr·ªçng:</strong> Link x√°c nh·∫≠n s·∫Ω h·∫øt h·∫°n sau <strong>15 ph√∫t</strong>. 
                    N·∫øu kh√¥ng x√°c nh·∫≠n trong th·ªùi gian n√†y, t√†i kho·∫£n s·∫Ω b·ªã x√≥a t·ª± ƒë·ªông.
                </div>
                
                <div class="success">
                    <strong>üéâ Sau khi x√°c nh·∫≠n, b·∫°n s·∫Ω c√≥ th·ªÉ:</strong>
                    <ul>
                        <li>ƒêƒÉng nh·∫≠p v√†o h·ªá th·ªëng</li>
                        <li>Mua s·∫Øm c√°c kh√≥a h·ªçc</li>
                        <li>Theo d√µi ƒë∆°n h√†ng</li>
                        <li>Truy c·∫≠p c√°c t√≠nh nƒÉng ƒë·ªôc quy·ªÅn</li>
                    </ul>
                </div>
                
                <div class="warning">
                    <strong>‚ö†Ô∏è C·∫£nh b√°o b·∫£o m·∫≠t:</strong>
                    <ul>
                        <li>N·∫øu b·∫°n kh√¥ng ƒëƒÉng k√Ω t√†i kho·∫£n n√†y, vui l√≤ng b·ªè qua email</li>
                        <li>Kh√¥ng chia s·∫ª link x√°c nh·∫≠n v·ªõi b·∫•t k·ª≥ ai</li>
                        <li>Link ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng m·ªôt l·∫ßn duy nh·∫•t</li>
                    </ul>
                </div>
                
                <p>N·∫øu n√∫t kh√¥ng ho·∫°t ƒë·ªông, b·∫°n c√≥ th·ªÉ copy v√† paste link sau v√†o tr√¨nh duy·ªát:</p>
                <p style="word-break: break-all; background: #f8f9fa; padding: 10px; border-radius: 5px; font-family: monospace;">
                    ${verificationUrl}
                </p>
            </div>
            
            <div class="footer">
                <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© ClassHub</strong></p>
                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
                <p>¬© 2025 ClassHub. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
            </div>
        </div>
    </body>
    </html>
  `;
};

// G·ª≠i email x√°c nh·∫≠n ƒëƒÉng k√Ω
const sendVerificationEmail = async (email, verificationUrl, fullname) => {
  try {
    console.log('üìß [EMAIL] Starting to send verification email...');
    console.log('üìß [EMAIL] To:', email);
    console.log('üìß [EMAIL] From:', process.env.SENDGRID_FROM_EMAIL || 'noreply@classhub.com');
    console.log('üîó [EMAIL] Verification URL:', verificationUrl);
    console.log('üë§ [EMAIL] Fullname:', fullname);
    
    const msg = {
      to: email,
      from: {
        email: process.env.SENDGRID_FROM_EMAIL || 'noreply@classhub.com',
        name: 'ClassHub'
      },
      subject: 'üéì X√°c nh·∫≠n ƒëƒÉng k√Ω t√†i kho·∫£n - ClassHub',
      html: createVerificationEmail(verificationUrl, fullname)
    };

    console.log('üì§ [EMAIL] Sending email via SendGrid...');
    console.log('üîë [EMAIL] SendGrid API Key configured:', process.env.SENDGRID_API_KEY ? 'Yes' : 'No');
    
    const result = await sgMail.send(msg);
    console.log('‚úÖ [EMAIL] Email sent successfully!');
    console.log('üìä [EMAIL] SendGrid response status:', result[0].statusCode);
    console.log('üìß [EMAIL] Email delivered to:', email);
    console.log('üÜî [EMAIL] Message ID:', result[0].headers['x-message-id']);
    
    return { success: true, messageId: result[0].headers['x-message-id'] };
  } catch (error) {
    console.error('‚ùå [EMAIL] Error sending verification email:', error.message);
    console.error('üîç [EMAIL] Full error details:', error);
    
    if (error.response) {
      console.error('üìä [EMAIL] SendGrid error response:', error.response.body);
    }
    
    throw new Error('Kh√¥ng th·ªÉ g·ª≠i email x√°c nh·∫≠n. Vui l√≤ng th·ª≠ l·∫°i sau.');
  }
};

// T·∫°o verification token v√† l∆∞u th√¥ng tin user t·∫°m th·ªùi
const createVerificationToken = async (userData) => {
  try {
    console.log('üé´ [TOKEN] Creating verification token...');
    const { email } = userData;
    console.log('üìß [TOKEN] Email:', email);
    
    // X√≥a verification c≈© n·∫øu c√≥
    console.log('üóëÔ∏è [TOKEN] Cleaning up old verifications...');
    const deletedCount = await EmailVerification.deleteMany({ email });
    console.log('üóëÔ∏è [TOKEN] Deleted old verifications:', deletedCount.deletedCount);
    
    // T·∫°o token m·ªõi
    const token = crypto.randomBytes(32).toString('hex');
    const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 ph√∫t
    
    console.log('üé´ [TOKEN] Token generated:', token.substring(0, 20) + '...');
    console.log('‚è∞ [TOKEN] Expires at:', expiresAt);
    
    const emailVerification = new EmailVerification({
      email,
      token,
      userData,
      expiresAt
    });
    
    console.log('üíæ [TOKEN] Saving verification to database...');
    await emailVerification.save();
    console.log('‚úÖ [TOKEN] Verification token created and saved successfully');
    
    // Verify the token was actually saved
    const savedVerification = await EmailVerification.findOne({ token });
    console.log('üîç [TOKEN] Verification saved check:', savedVerification ? 'SUCCESS' : 'FAILED');
    if (savedVerification) {
        console.log('üìß [TOKEN] Saved email:', savedVerification.email);
        console.log('‚è∞ [TOKEN] Saved expires:', savedVerification.expiresAt);
    }
    
    return { token, expiresAt };
  } catch (error) {
    console.error('‚ùå [TOKEN] Error creating verification token:', error.message);
    console.error('üîç [TOKEN] Full error:', error);
    throw error;
  }
};

// X√°c th·ª±c verification token v√† t·∫°o user
const verifyEmailToken = async (token) => {
  try {
    console.log('üîç [VERIFY] Looking for verification token...');
    console.log('üé´ [VERIFY] Token to search:', token.substring(0, 20) + '...');
    console.log('‚è∞ [VERIFY] Current time:', new Date());
    
    // Ki·ªÉm tra xem token ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a
    if (processedResults.has(token)) {
      console.log('üìã [VERIFY] Token already processed, returning cached result');
      return processedResults.get(token);
    }
    
    // Ki·ªÉm tra xem token ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω kh√¥ng
    if (processingTokens.has(token)) {
      console.log('‚è≥ [VERIFY] Token is being processed, waiting...');
      // ƒê·ª£i m·ªôt ch√∫t v√† ki·ªÉm tra l·∫°i
      await new Promise(resolve => setTimeout(resolve, 100));
      if (processedResults.has(token)) {
        return processedResults.get(token);
      }
      throw new Error('Token ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω, vui l√≤ng th·ª≠ l·∫°i sau');
    }
    
    // ƒê√°nh d·∫•u token ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω
    processingTokens.add(token);
    
    try {
      // T√¨m token (c√≥ th·ªÉ ƒë√£ verify ho·∫∑c ch∆∞a)
      const verification = await EmailVerification.findOne({ 
        token, 
        expiresAt: { $gt: new Date() }
      });
      
      console.log('üîç [VERIFY] Verification found:', verification ? 'YES' : 'NO');
      
      if (verification) {
        console.log('üìß [VERIFY] Email:', verification.email);
        console.log('‚è∞ [VERIFY] Expires at:', verification.expiresAt);
        console.log('‚úÖ [VERIFY] Verified status:', verification.verified);
        
        // N·∫øu token ƒë√£ ƒë∆∞·ª£c verify tr∆∞·ªõc ƒë√≥
        if (verification.verified) {
          console.log('‚úÖ [VERIFY] Token already verified, checking if user exists...');
          
          // Ki·ªÉm tra xem user ƒë√£ t·ªìn t·∫°i ch∆∞a
          const existingUser = await User.findOne({ email: verification.email });
          if (existingUser) {
            console.log('üë§ [VERIFY] User already exists, returning success');
            const result = {
              success: true,
              message: 'Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c tr∆∞·ªõc ƒë√≥',
              user: existingUser
            };
            processedResults.set(token, result);
            return result;
          } else {
            throw new Error('Token ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng nh∆∞ng user kh√¥ng t·ªìn t·∫°i');
          }
        }
      } else {
        // Ki·ªÉm tra chi ti·∫øt h∆°n
        console.log('üîç [VERIFY] Checking why token not found...');
        
        const tokenExists = await EmailVerification.findOne({ token });
        console.log('üé´ [VERIFY] Token exists in DB:', tokenExists ? 'YES' : 'NO');
        
        if (tokenExists) {
          console.log('‚è∞ [VERIFY] Token expires at:', tokenExists.expiresAt);
          console.log('‚úÖ [VERIFY] Token verified status:', tokenExists.verified);
          console.log('‚è∞ [VERIFY] Current time:', new Date());
          console.log('‚è∞ [VERIFY] Is expired?', new Date() > tokenExists.expiresAt);
        }
      }
      
      if (!verification) {
        throw new Error('Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
      }
      
      // Ki·ªÉm tra xem email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω ch∆∞a
      const existingUser = await User.findOne({ email: verification.email });
      if (existingUser) {
        throw new Error('Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω');
      }
      
      // T·∫°o user m·ªõi
      const newUser = new User({
        ...verification.userData,
        isVerified: true
      });
      
      // G√°n permissions cho user m·ªõi
      const rolePermissionService = require('../services/rolePermissionService');
      // T·∫•t c·∫£ user ƒë·ªÅu c√≥ quy·ªÅn t·∫°o b√†i
      rolePermissionService.assignDefaultUserPermissions(newUser);
      // G√°n permissions theo role n·∫øu c√≥
      if (newUser.role && newUser.role !== 'user') {
          rolePermissionService.assignPermissionsByRole(newUser, newUser.role);
      }
      
      const user = await newUser.save();
      
      // ƒê√°nh d·∫•u verification ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
      verification.verified = true;
      await verification.save();
      
      // X√≥a verification record sau khi verify th√†nh c√¥ng
      await EmailVerification.deleteOne({ _id: verification._id });
      
      // Remove password from response
      const { password, ...userWithoutPassword } = user._doc;
      
      const result = { success: true, user: userWithoutPassword };
      
      // L∆∞u k·∫øt qu·∫£ v√†o cache
      processedResults.set(token, result);
      
      return result;
    } finally {
      // X√≥a token kh·ªèi danh s√°ch ƒëang x·ª≠ l√Ω
      processingTokens.delete(token);
    }
  } catch (error) {
    console.error('Error verifying email token:', error);
    throw error;
  }
};

// X√≥a c√°c verification h·∫øt h·∫°n v√† user ch∆∞a x√°c nh·∫≠n
const cleanupExpiredVerifications = async () => {
  try {
    // T√¨m c√°c verification h·∫øt h·∫°n
    const expiredVerifications = await EmailVerification.find({
      expiresAt: { $lt: new Date() },
      verified: false
    });
    
    // X√≥a c√°c verification h·∫øt h·∫°n
    const result = await EmailVerification.deleteMany({
      expiresAt: { $lt: new Date() },
      verified: false
    });
    
    console.log(`Cleaned up ${result.deletedCount} expired email verifications`);
    return result.deletedCount;
  } catch (error) {
    console.error('Error cleaning up expired verifications:', error);
    throw error;
  }
};

// Ki·ªÉm tra tr·∫°ng th√°i verification
const checkVerificationStatus = async (email) => {
  try {
    const verification = await EmailVerification.findOne({ 
      email,
      verified: false,
      expiresAt: { $gt: new Date() }
    });
    
    if (!verification) {
      return { exists: false };
    }
    
    return { 
      exists: true, 
      expiresAt: verification.expiresAt,
      timeLeft: Math.max(0, verification.expiresAt - new Date())
    };
  } catch (error) {
    console.error('Error checking verification status:', error);
    throw error;
  }
};

module.exports = {
  sendVerificationEmail,
  createVerificationToken,
  verifyEmailToken,
  cleanupExpiredVerifications,
  checkVerificationStatus
};
