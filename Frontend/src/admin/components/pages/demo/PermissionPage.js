import React, { useState } from 'react';
import DefaultLayout from '../../layout/default/DefaultLayout';
import { usePermissions } from '../../../../hooks/usePermissions';
import './PermissionPage.scss';

function PermissionPage() {
    const {
        user,
        loading,
        canManageProducts,
        canCreatePosts,
        canManageUsers,
        canConfirmOrders,
        canCancelOrders,
        canEditPosts,
        canDeletePosts,
        canManageTopics,
        canAssignRoles,
        canManageBanners,
        canManagePaymentMethods,
        canManageShipping,
        canViewAnalytics
    } = usePermissions();

    const [activeTab, setActiveTab] = useState('granted');

    // ƒê·ªãnh nghƒ©a c√°c nh√≥m quy·ªÅn v·ªõi m√¥ t·∫£ chi ti·∫øt v√† icon
    const permissionGroups = [
        {
            title: "Qu·∫£n L√Ω Ng∆∞·ªùi D√πng",
            icon: "üë•",
            color: "#8B5CF6",
            permissions: [
                { key: 'canManageUsers', name: 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng', value: canManageUsers, description: 'Xem, th√™m, s·ª≠a, x√≥a ng∆∞·ªùi d√πng', icon: "üë§" },
                { key: 'canAssignRoles', name: 'Ph√¢n quy·ªÅn', value: canAssignRoles, description: 'G√°n vai tr√≤ v√† quy·ªÅn cho ng∆∞·ªùi d√πng', icon: "üîê" }
            ]
        },
        {
            title: "Qu·∫£n L√Ω S·∫£n Ph·∫©m & ƒê∆°n H√†ng",
            icon: "üì¶",
            color: "#F59E0B",
            permissions: [
                { key: 'canManageProducts', name: 'Qu·∫£n l√Ω s·∫£n ph·∫©m', value: canManageProducts, description: 'Th√™m, s·ª≠a, x√≥a s·∫£n ph·∫©m', icon: "üõçÔ∏è" },
                { key: 'canConfirmOrders', name: 'X√°c nh·∫≠n ƒë∆°n h√†ng', value: canConfirmOrders, description: 'X√°c nh·∫≠n ƒë∆°n h√†ng m·ªõi', icon: "‚úÖ" },
                { key: 'canCancelOrders', name: 'H·ªßy ƒë∆°n h√†ng', value: canCancelOrders, description: 'H·ªßy ƒë∆°n h√†ng', icon: "‚ùå" }
            ]
        },
        {
            title: "Qu·∫£n L√Ω N·ªôi Dung",
            icon: "üìù",
            color: "#10B981",
            permissions: [
                { key: 'canCreatePosts', name: 'T·∫°o b√†i vi·∫øt', value: canCreatePosts, description: 'T·∫°o b√†i vi·∫øt m·ªõi', icon: "‚úçÔ∏è" },
                { key: 'canEditPosts', name: 'S·ª≠a b√†i vi·∫øt', value: canEditPosts, description: 'Ch·ªânh s·ª≠a b√†i vi·∫øt', icon: "‚úèÔ∏è" },
                { key: 'canDeletePosts', name: 'X√≥a b√†i vi·∫øt', value: canDeletePosts, description: 'X√≥a b√†i vi·∫øt', icon: "üóëÔ∏è" },
                { key: 'canManageTopics', name: 'Qu·∫£n l√Ω ch·ªß ƒë·ªÅ', value: canManageTopics, description: 'Qu·∫£n l√Ω c√°c ch·ªß ƒë·ªÅ b√†i vi·∫øt', icon: "üè∑Ô∏è" }
            ]
        },
        {
            title: "Qu·∫£n L√Ω H·ªá Th·ªëng",
            icon: "‚öôÔ∏è",
            color: "#6B7280",
            permissions: [
                { key: 'canManageBanners', name: 'Qu·∫£n l√Ω banner', value: canManageBanners, description: 'Qu·∫£n l√Ω banner qu·∫£ng c√°o', icon: "üñºÔ∏è" },
                { key: 'canManagePaymentMethods', name: 'Qu·∫£n l√Ω ph∆∞∆°ng th·ª©c thanh to√°n', value: canManagePaymentMethods, description: 'C·∫•u h√¨nh ph∆∞∆°ng th·ª©c thanh to√°n', icon: "üí≥" },
                { key: 'canManageShipping', name: 'Qu·∫£n l√Ω v·∫≠n chuy·ªÉn', value: canManageShipping, description: 'C·∫•u h√¨nh ph√≠ v·∫≠n chuy·ªÉn', icon: "üöö" },
                { key: 'canViewAnalytics', name: 'Xem th·ªëng k√™', value: canViewAnalytics, description: 'Xem b√°o c√°o v√† th·ªëng k√™', icon: "üìä" }
            ]
        }
    ];

    // L·∫•y danh s√°ch quy·ªÅn c√≥ s·∫µn
    const availablePermissions = permissionGroups.flatMap(group => group.permissions);
    const grantedPermissions = availablePermissions.filter(p => p.value);
    const deniedPermissions = availablePermissions.filter(p => !p.value);

    const getRoleInfo = () => {
        if (user?.admin) return { name: 'Qu·∫£n tr·ªã vi√™n', color: '#DC2626', icon: 'üëë' };
        if (user?.blogger) return { name: 'Ng∆∞·ªùi vi·∫øt blog', color: '#2563EB', icon: '‚úçÔ∏è' };
        if (user?.role === 'Qu·∫£n l√Ω s·∫£n ph·∫©m') return { name: 'Qu·∫£n l√Ω s·∫£n ph·∫©m', color: '#D97706', icon: 'üì¶' };
        return { name: 'Ng∆∞·ªùi d√πng', color: '#6B7280', icon: 'üë§' };
    };

    const roleInfo = getRoleInfo();

    // Hi·ªÉn th·ªã loading state
    if (loading) {
        return (
            <DefaultLayout>
                <div className="permission-page">
                    <div className="loading-container">
                        <div className="loading-spinner"></div>
                        <p>ƒêang t·∫£i th√¥ng tin quy·ªÅn h·∫°n...</p>
                    </div>
                </div>
            </DefaultLayout>
        );
    }

    return (
        <DefaultLayout>
            <div className="permission-page">
                {/* Header Section */}
                <div className="permission-header">
                    <div className="header-content">
                        <div className="header-left">
                            <h1 className="page-title">
                                <span className="title-icon">üîê</span>
                                Quy·ªÅn Truy C·∫≠p C·ªßa T√¥i
                            </h1>
                            <p className="page-subtitle">Xem v√† qu·∫£n l√Ω quy·ªÅn h·∫°n trong h·ªá th·ªëng</p>
                        </div>
                        <div className="header-right">
                            <div className="permission-stats">
                                <div className="stat-item">
                                    <div className="stat-number">{grantedPermissions.length}</div>
                                    <div className="stat-label">Quy·ªÅn ƒë∆∞·ª£c c·∫•p</div>
                                </div>
                                <div className="stat-divider"></div>
                                <div className="stat-item">
                                    <div className="stat-number">{availablePermissions.length}</div>
                                    <div className="stat-label">T·ªïng quy·ªÅn</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* User Info Card */}
                <div className="user-info-card">
                    <div className="user-avatar">
                        <span className="avatar-icon">{roleInfo.icon}</span>
                    </div>
                    <div className="user-details">
                        <div className="user-name">{user?.fullname || 'N/A'}</div>
                        <div className="user-email">{user?.email || 'N/A'}</div>
                        <div className="user-role" style={{ backgroundColor: roleInfo.color }}>
                            {roleInfo.name}
                        </div>
                    </div>
                    <div className="user-percentage">
                        <div className="percentage-circle">
                            <svg viewBox="0 0 100 100" className="circle-svg">
                                <circle cx="50" cy="50" r="45" className="circle-bg"></circle>
                                <circle 
                                    cx="50" 
                                    cy="50" 
                                    r="45" 
                                    className="circle-progress"
                                    style={{
                                        strokeDasharray: `${2 * Math.PI * 45}`,
                                        strokeDashoffset: `${2 * Math.PI * 45 * (1 - grantedPermissions.length / availablePermissions.length)}`
                                    }}
                                ></circle>
                            </svg>
                            <div className="percentage-text">
                                {Math.round((grantedPermissions.length / availablePermissions.length) * 100)}%
                            </div>
                        </div>
                    </div>
                </div>

                {/* Tab Navigation */}
                <div className="tab-navigation">
                    <button 
                        className={`tab-button ${activeTab === 'granted' ? 'active' : ''}`}
                        onClick={() => setActiveTab('granted')}
                    >
                        <span className="tab-icon">‚úÖ</span>
                        Quy·ªÅn ƒê∆∞·ª£c C·∫•p ({grantedPermissions.length})
                    </button>
                    <button 
                        className={`tab-button ${activeTab === 'denied' ? 'active' : ''}`}
                        onClick={() => setActiveTab('denied')}
                    >
                        <span className="tab-icon">‚ùå</span>
                        Quy·ªÅn Kh√¥ng ƒê∆∞·ª£c C·∫•p ({deniedPermissions.length})
                    </button>
                </div>

                {/* Permission Content */}
                <div className="permission-content">
                    {activeTab === 'granted' ? (
                        <div className="permissions-grid">
                            {permissionGroups.map((group, groupIndex) => {
                                const groupPermissions = group.permissions.filter(p => p.value);
                                if (groupPermissions.length === 0) return null;
                                
                                return (
                                    <div key={groupIndex} className="permission-group">
                                        <div className="group-header" style={{ borderLeftColor: group.color }}>
                                            <span className="group-icon">{group.icon}</span>
                                            <h3 className="group-title">{group.title}</h3>
                                            <span className="group-count">{groupPermissions.length}</span>
                                        </div>
                                        <div className="group-permissions">
                                            {groupPermissions.map((permission, index) => (
                                                <div key={index} className="permission-item granted">
                                                    <div className="permission-icon">{permission.icon}</div>
                                                    <div className="permission-content">
                                                        <div className="permission-name">{permission.name}</div>
                                                        <div className="permission-description">{permission.description}</div>
                                                    </div>
                                                    <div className="permission-status">
                                                        <span className="status-icon">‚úì</span>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                );
                            })}
                            {grantedPermissions.length === 0 && (
                                <div className="empty-state">
                                    <div className="empty-icon">üîí</div>
                                    <h3>Ch∆∞a c√≥ quy·ªÅn n√†o</h3>
                                    <p>B·∫°n ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn n√†o trong h·ªá th·ªëng</p>
                                </div>
                            )}
                        </div>
                    ) : (
                        <div className="permissions-grid">
                            {permissionGroups.map((group, groupIndex) => {
                                const groupPermissions = group.permissions.filter(p => !p.value);
                                if (groupPermissions.length === 0) return null;
                                
                                return (
                                    <div key={groupIndex} className="permission-group">
                                        <div className="group-header" style={{ borderLeftColor: group.color }}>
                                            <span className="group-icon">{group.icon}</span>
                                            <h3 className="group-title">{group.title}</h3>
                                            <span className="group-count">{groupPermissions.length}</span>
                                        </div>
                                        <div className="group-permissions">
                                            {groupPermissions.map((permission, index) => (
                                                <div key={index} className="permission-item denied">
                                                    <div className="permission-icon">{permission.icon}</div>
                                                    <div className="permission-content">
                                                        <div className="permission-name">{permission.name}</div>
                                                        <div className="permission-description">{permission.description}</div>
                                                    </div>
                                                    <div className="permission-status">
                                                        <span className="status-icon">‚úó</span>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                );
                            })}
                            {deniedPermissions.length === 0 && (
                                <div className="empty-state success">
                                    <div className="empty-icon">üéâ</div>
                                    <h3>Tuy·ªát v·ªùi!</h3>
                                    <p>B·∫°n c√≥ t·∫•t c·∫£ quy·ªÅn trong h·ªá th·ªëng</p>
                                </div>
                            )}
                        </div>
                    )}
                </div>

                {/* Help Section */}
                <div className="help-section">
                    <div className="help-card">
                        <div className="help-header">
                            <span className="help-icon">‚ÑπÔ∏è</span>
                            <h3>Th√¥ng Tin H·ªá Th·ªëng Ph√¢n Quy·ªÅn</h3>
                        </div>
                        <div className="help-content">
                            <div className="help-item">
                                <div className="help-title">üîí V·ªÅ Ph√¢n Quy·ªÅn</div>
                                <ul>
                                    <li>Quy·ªÅn ƒë∆∞·ª£c c·∫•p d·ª±a tr√™n vai tr√≤ c·ªßa b·∫°n</li>
                                    <li>Admin c√≥ t·∫•t c·∫£ quy·ªÅn trong h·ªá th·ªëng</li>
                                    <li>Product Manager qu·∫£n l√Ω s·∫£n ph·∫©m v√† ƒë∆°n h√†ng</li>
                                    <li>Blogger qu·∫£n l√Ω n·ªôi dung v√† b√†i vi·∫øt</li>
                                </ul>
                            </div>
                            <div className="help-item">
                                <div className="help-title">üìû H·ªó Tr·ª£</div>
                                <p>N·∫øu b·∫°n c·∫ßn th√™m quy·ªÅn ho·∫∑c c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </DefaultLayout>
    );
}

export default PermissionPage;
